var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import * as utils from "./utils.js";
export class Ollama {
    constructor(config) {
        var _a;
        this.config = {
            address: (_a = config === null || config === void 0 ? void 0 : config.address) !== null && _a !== void 0 ? _a : "http://localhost:11434"
        };
        let f = null;
        if ((config === null || config === void 0 ? void 0 : config.fetch) != null) {
            f = config.fetch;
        }
        else if (typeof fetch !== "undefined") {
            f = fetch;
        }
        else if (typeof window !== "undefined") {
            f = window.fetch;
        }
        if (f == null) {
            throw new Error("unable to find fetch - please define it via 'config.fetch'");
        }
        this.fetch = f;
    }
    tags() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.get(this.fetch, `${this.config.address}/api/tags`);
            const json = yield response.json();
            return json.models.map(m => ({
                name: m.name,
                modifiedAt: new Date(m.modified_at),
                size: m.size
            }));
        });
    }
    generate(model, prompt, options) {
        return __asyncGenerator(this, arguments, function* generate_1() {
            var _a, e_1, _b, _c;
            const parameters = options === null || options === void 0 ? void 0 : options.parameters;
            options === null || options === void 0 ? true : delete options.parameters;
            const request = Object.assign({ model, prompt }, options);
            if (parameters != null) {
                request.options = parameters;
            }
            const response = yield __await(utils.post(this.fetch, `${this.config.address}/api/generate`, Object.assign({}, request)));
            if (!response.body) {
                throw new Error("Missing body");
            }
            const itr = utils.parseJSON(response.body);
            try {
                for (var _d = true, itr_1 = __asyncValues(itr), itr_1_1; itr_1_1 = yield __await(itr_1.next()), _a = itr_1_1.done, !_a;) {
                    _c = itr_1_1.value;
                    _d = false;
                    try {
                        const message = _c;
                        if (message.done) {
                            return yield __await({
                                model: message.model,
                                createdAt: new Date(message.created_at),
                                context: message.context,
                                totalDuration: message.total_duration,
                                loadDuration: message.load_duration,
                                promptEvalCount: message.prompt_eval_count,
                                evalCount: message.eval_count,
                                evalDuration: message.eval_duration
                            });
                        }
                        yield yield __await(message.response);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = itr_1.return)) yield __await(_b.call(itr_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            throw new Error("Did not recieve done response in stream.");
        });
    }
    create(name, path) {
        return __asyncGenerator(this, arguments, function* create_1() {
            var _a, e_2, _b, _c;
            const response = yield __await(utils.post(this.fetch, `${this.config.address}/api/create`, { name, path }));
            if (!response.body) {
                throw new Error("Missing body");
            }
            const itr = utils.parseJSON(response.body);
            try {
                for (var _d = true, itr_2 = __asyncValues(itr), itr_2_1; itr_2_1 = yield __await(itr_2.next()), _a = itr_2_1.done, !_a;) {
                    _c = itr_2_1.value;
                    _d = false;
                    try {
                        const message = _c;
                        yield yield __await(message.status);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = itr_2.return)) yield __await(_b.call(itr_2));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    copy(source, destination) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils.post(this.fetch, `${this.config.address}/api/copy`, {
                source,
                destination
            });
        });
    }
    delete(name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils.del(this.fetch, `${this.config.address}/api/delete`, { name });
        });
    }
    pull(name) {
        var _a, _b, _c;
        return __asyncGenerator(this, arguments, function* pull_1() {
            var _d, e_3, _e, _f;
            const response = yield __await(utils.post(this.fetch, `${this.config.address}/api/pull`, { name }));
            if (!response.body) {
                throw new Error("Missing body");
            }
            const itr = utils.parseJSON(response.body);
            try {
                for (var _g = true, itr_3 = __asyncValues(itr), itr_3_1; itr_3_1 = yield __await(itr_3.next()), _d = itr_3_1.done, !_d;) {
                    _f = itr_3_1.value;
                    _g = false;
                    try {
                        const message = _f;
                        yield yield __await({
                            status: message.status,
                            digest: (_a = message["digest"]) !== null && _a !== void 0 ? _a : "",
                            total: (_b = message["total"]) !== null && _b !== void 0 ? _b : 0,
                            completed: (_c = message["completed"]) !== null && _c !== void 0 ? _c : 0
                        });
                    }
                    finally {
                        _g = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_g && !_d && (_e = itr_3.return)) yield __await(_e.call(itr_3));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    embeddings(model, prompt, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.post(this.fetch, `${this.config.address}/api/embeddings`, {
                model,
                prompt,
                options: parameters !== null && parameters !== void 0 ? parameters : {}
            });
            const json = yield response.json();
            return json.embedding;
        });
    }
}
