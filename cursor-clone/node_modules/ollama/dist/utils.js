var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
export const formatAddress = (address) => {
    if (!address.startsWith("http://") && !address.startsWith("https://")) {
        address = `http://${address}`;
    }
    while (address.endsWith("/")) {
        address = address.substring(0, address.length - 1);
    }
    return address;
};
const checkOk = (response) => __awaiter(void 0, void 0, void 0, function* () {
    if (!response.ok) {
        let message = yield response.text();
        try {
            message = JSON.parse(message).error;
        }
        catch (error) {
            // Do nothing.
        }
        throw new Error(message);
    }
});
export const get = (fetch, address) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address));
    yield checkOk(response);
    return response;
});
export const post = (fetch, address, data) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address), {
        method: "POST",
        body: JSON.stringify(data)
    });
    yield checkOk(response);
    return response;
});
export const del = (fetch, address, data) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(formatAddress(address), {
        method: "DELETE",
        body: JSON.stringify(data)
    });
    yield checkOk(response);
    return response;
});
export const parseJSON = function (itr) {
    var _a;
    return __asyncGenerator(this, arguments, function* () {
        var _b, e_1, _c, _d;
        const decoder = new TextDecoder("utf-8");
        let buffer = "";
        try {
            // TS is a bit strange here, ReadableStreams are AsyncIterable but TS doesn't see it.
            for (var _e = true, _f = __asyncValues(itr), _g; _g = yield __await(_f.next()), _b = _g.done, !_b;) {
                _d = _g.value;
                _e = false;
                try {
                    const chunk = _d;
                    buffer += decoder.decode(chunk);
                    const parts = buffer.split("\n");
                    buffer = (_a = parts.pop()) !== null && _a !== void 0 ? _a : "";
                    for (const part of parts) {
                        try {
                            yield yield __await(JSON.parse(part));
                        }
                        catch (error) {
                            console.warn("invalid json: ", part);
                        }
                    }
                }
                finally {
                    _e = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = _f.return)) yield __await(_c.call(_f));
            }
            finally { if (e_1) throw e_1.error; }
        }
        for (const part of buffer.split("\n").filter(p => p !== "")) {
            try {
                yield yield __await(JSON.parse(part));
            }
            catch (error) {
                console.warn("invalid json: ", part);
            }
        }
    });
};
